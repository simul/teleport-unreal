// (c) 2019 Simul.co

#include "/Engine/Public/Platform.ush"
#include "/Plugin/Teleport/Private/Common.ush"

struct DirectionalLight 
{
	float4 Color;
	float3 Direction;
};

RWTexture2DArray<float4> RWOutputTexture;
TextureCube InputCubeMap;
SamplerState DefaultSampler;
uint DirLightCount;
uint RandomSeed;
StructuredBuffer<DirectionalLight> DirLights;

RWTexture2D<float4> RWStreamOutputTexture;

int2 Offset;
int SourceSize;
int TargetSize;
float Roughness;

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void NoSourceCS(uint3 ThreadID : SV_DispatchThreadID)
{
	uint OutputW, OutputH, OutputD;
	RWOutputTexture.GetDimensions(OutputW, OutputH, OutputD);
	float3 view = CubeFaceIndexToView(ThreadID, uint2(OutputW,OutputH));
	float4 SceneColour = InputCubeMap.SampleLevel(DefaultSampler, view, 0);
	SceneColour = float4(saturate(view), 1.0) + 0.0001*SceneColour;
	RWOutputTexture[int3(ThreadID)] = SceneColour;
}

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void UpdateSpecularCS(uint3 ThreadID : SV_DispatchThreadID)
{
	uint OutputW, OutputH, OutputD;
	RWOutputTexture.GetDimensions(OutputW, OutputH, OutputD);
	float3 view = CubeFaceIndexToView(ThreadID, uint2(OutputW, OutputH));
	float4 SceneColour = InputCubeMap.SampleLevel(DefaultSampler, view, 0);
	//SceneColour.g += 0.05;
	RWOutputTexture[int3(ThreadID)] = SceneColour;
}

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void UpdateDiffuseCS(uint3 ThreadID : SV_DispatchThreadID)
{
	uint OutputW, OutputH, OutputD;
	RWOutputTexture.GetDimensions(OutputW, OutputH, OutputD);
	float3 view = CubeFaceIndexToView(ThreadID, uint2(OutputW, OutputH));
	float4 SceneColour = InputCubeMap.SampleLevel(DefaultSampler, view, 0);
	SceneColour.r += 0.1;
	RWOutputTexture[int3(ThreadID)] = SceneColour;
}

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void UpdateLightingCS(uint3 ThreadID : SV_DispatchThreadID)
{
	uint OutputW, OutputH, OutputD;
	RWOutputTexture.GetDimensions(OutputW, OutputH, OutputD);
	float3 view = CubeFaceIndexToView(ThreadID, uint2(OutputW, OutputH));
	float4 Radiance = float4(0, 0, 0, 0);
	for (uint i = 0; i < DirLightCount; ++i)
	{
		float factor = dot(DirLights[i].Direction, -view); 
		Radiance += (DirLights[i].Color * factor);
	}
	//Radiance.b += 0.1;
	RWOutputTexture[int3(ThreadID)] = saturate(Radiance);
}

mat3 GetTangentBasis(vec3 Z_dir)
{
	vec3 UpVector = abs(Z_dir.z) < 0.999 ? vec3(0, 0, 1) : vec3(1, 0, 0);
	vec3 TangentX = normalize(cross(UpVector, Z_dir));
	vec3 TangentY = cross(Z_dir, TangentX);
	return mat3(TangentX, TangentY, Z_dir);
}

vec4 CosineSampleHemisphere(vec2 E)
{
	float Phi = 2 * PI * E.x;
	float cos_theta = sqrt(E.y);
	float sin_theta = sqrt(1 - cos_theta * cos_theta);

	vec3 H;
	H.x = sin_theta * cos(Phi);
	H.y = sin_theta * sin(Phi);
	H.z = cos_theta;

	float PDF = cos_theta / PI;

	return vec4(H, PDF);
}

vec4 ImportanceSampleGGX(vec2 E, float roughness)
{
	float m = roughness * roughness;
	float m2 = m * m;

	float Phi = 2 * PI * E.x;
	float cos_theta = sqrt((1 - E.y) / (1 + (m2 - 1) * E.y));
	float sin_theta = sqrt(1 - cos_theta * cos_theta);

	vec3 H;
	H.x = sin_theta * cos(Phi);
	H.y = sin_theta * sin(Phi);
	H.z = cos_theta;

	float d = (cos_theta * m2 - cos_theta) * cos_theta + 1;
	float D = m2 / (PI*d*d);
	float PDF = D * cos_theta;

	return vec4(H, PDF);
}
/** Reverses all the 32 bits. */
uint ReverseBits32(uint bits)
{
	bits = (bits << 16) | (bits >> 16);
	bits = ((bits & 0x00ff00ff) << 8) | ((bits & 0xff00ff00) >> 8);
	bits = ((bits & 0x0f0f0f0f) << 4) | ((bits & 0xf0f0f0f0) >> 4);
	bits = ((bits & 0x33333333) << 2) | ((bits & 0xcccccccc) >> 2);
	bits = ((bits & 0x55555555) << 1) | ((bits & 0xaaaaaaaa) >> 1);
	return bits;
}


vec2 Hammersley(uint index, uint NumSamples, uint2 random)
{
	float E1 = frac((float)index / float(NumSamples) + float(random.x & 0xffff) / (1 << 16));
	// Radical inverse:
	float E2 = float(ReverseBits32(index) ^ random.y) * 2.3283064365386963e-10;
	return vec2(E1, E2);
}


float GetroughnessFromMip(float mip, float num_mips, float roughness_mip_scale)
{
	// exp2 is pow(2.0,x)
	return saturate(exp2((3 - num_mips + mip) / roughness_mip_scale));
}

vec3 rand3v(vec3 p)
{
	return frac(sin(vec3(dot(p, vec3(127.1, 311.7, 55.3221)),
		dot(p, vec3(269.5, 183.3, 251.1732)),
		dot(p, vec3(12.9898, 42.1287, 78.233))))
		* 43758.5453123);
}

vec4 RoughnessMip(vec3 view, float roughness, float alpha, bool rough)
{
	vec4 outp;
	float r =  saturate(roughness);//exp2( ( 3 - numMips + mipIndex) / 1.2 );;
	float CubeSize =TargetSize;
	const float SolidAngleTexel = 4.0 * PI / float((6.0 * CubeSize * CubeSize) * 2.0);
	const uint NumSamples = 64;// (roughness < 0.1) ? 32 : 64;
	vec4 result = vec4(0, 0, 0, 0);
	mat3 TangentToWorld = GetTangentBasis(view);
	float Weight = 0.0;
	for (uint i = 0; i < NumSamples; i++)
	{
		vec3 rn = rand3v(view + vec3(RandomSeed, i, RandomSeed+ i));
		vec2 E = Hammersley(i, NumSamples, uint2(rn.xy*(1000000+ RandomSeed)));
		vec3 L;
		if (rough) // used for roughness > 0.99
		{
			// roughness=1, GGX is constant. Use cosine distribution instead
			L = CosineSampleHemisphere(E).xyz;
			float NoL = L.z;
			L = mul(L, TangentToWorld);
			result +=  InputCubeMap.SampleLevel(DefaultSampler, L, 0) * NoL*saturate(L.z+1.0);
			Weight += NoL;
		}
		else
		{
			E.y *= 0.995;
			vec3 H = ImportanceSampleGGX(E, r).xyz;
			L = 2 * H.z*H - vec3(0, 0, 1.0);

			float NoL = L.z;
			if (NoL > 0)
			{
				float NoH = H.z;
				float PDF = D_GGX(r, NoH) * 0.25;
				float SolidAngleSample = 1.0 / (NumSamples * PDF);
				float Mip = 0.5 * log2(SolidAngleSample / SolidAngleTexel);

				float ConeAngle = acos(saturate(1.0 - SolidAngleSample / (2.0*PI)));

				L = mul(L, TangentToWorld);
				// Apply a limit to avoid numerical issues:
				vec4 lookup = 100.0*saturate(0.01*InputCubeMap.SampleLevel(DefaultSampler, L, 0))*saturate(L.z +1.0);
				result += NoL * lookup;

				Weight += NoL;
			}
		}
	}
	outp = result / Weight;
	return  vec4(outp.rgb, alpha);
}

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void FromMipCS(uint3 ThreadID : SV_DispatchThreadID)
{
	uint OutputW, OutputH, OutputD;
	RWOutputTexture.GetDimensions(OutputW, OutputH, OutputD);
	if (ThreadID.x >= OutputW || ThreadID.y >= OutputH)
		return;
	float3 view = CubeFaceIndexToView(ThreadID, uint2(OutputW, OutputH));
	float alpha = 0.1;
	vec4 Result = RoughnessMip(view, Roughness, alpha, MIP_ROUGH);
	//float4 SceneColour = InputCubeMap.SampleLevel(DefaultSampler, view, 0);
	//SceneColour = float4(saturate(view), 1.0) + 0.0001*SceneColour;
	Result *= alpha;
	Result += RWOutputTexture[int3(ThreadID)] * (1.0 - alpha);
	RWOutputTexture[int3(ThreadID)] = Result;
}

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void WriteToStreamCS(uint3 ThreadID : SV_DispatchThreadID)
{
	uint InputW, InputH, InputD;
	RWOutputTexture.GetDimensions(InputW, InputH, InputD);
	if (ThreadID.x >= InputW || ThreadID.y >= InputH)
		return;
	int3 pos = int3(ThreadID);
	int2 FaceOffsets[] = { {0,0},{1,0},{2,0},{0,1},{1,1},{2,1} };
	float4 radiance = RWOutputTexture[pos];
	RWStreamOutputTexture[int2(ThreadID.x , ThreadID.y ) + Offset + InputW * FaceOffsets[pos.z]] = radiance;
}

uint MipIndex;
uint NumMips;

void UpdateReflectionsPS(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
)
{
	OutColor = float4(0.5,0.0,1.0,1.0);
}
