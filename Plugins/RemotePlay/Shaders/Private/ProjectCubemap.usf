// (c) 2018-2019 Simul.co

#include "/Engine/Public/Platform.ush"
#include "/Plugin/RemotePlay/Private/Common.ush"

static const float HalfPI = 0.5 * PI;
static const float TwoPI  = 2.0 * PI;

TextureCube InputCubeMap;
SamplerState DefaultSampler;

// The input texture, but as an array of 6 2d faces.
RWTexture2DArray<float4> RWInputCubeAsArray;
RWTexture2D<float4> RWOutputColorTexture;

// Each flag signifies if a cube face or cube face segment is visible to the client
StructuredBuffer<int4> CullFlags;
int BlocksPerFaceAcross;

int2 Offset;
float3 CubemapCameraPositionMetres;

// Here. we will encode the camera position CubemapCameraPositionMetres in blocks of monochrome colour.
[numthreads(32, 4, 1)]
void EncodeCameraPositionCS(uint2 ThreadID : SV_DispatchThreadID)
{
	uint OutputW, OutputH;
	RWOutputColorTexture.GetDimensions(OutputW, OutputH);

	// We want to encode three 32-bit numbers with the minimum possible loss.
	// Therefore we will encode them in...
	// Binary.
	uint3 raw_uint		= asuint(CubemapCameraPositionMetres);

	// We will use the thread x as the bit index.
	uint3 masked_bits	= (raw_uint >> (ThreadID.x/4))&uint(1);		// 1 or 0, 1 or 0, 1 or 0
	int2 Pos			= Offset + int2(ThreadID);
	float4 X			= masked_bits.xxxx;
	float4 Y			= masked_bits.yyyy;
	float4 Z			= masked_bits.zzzz;
	RWOutputColorTexture[Pos]				= X;
	RWOutputColorTexture[Pos + int2(0,8)]	= Y;
	RWOutputColorTexture[Pos + int2(0,16)]	= Z;
}

// Checks if this part of the cubemap is visible to the client
bool FragmentIsVisible(int3 pos, int CubeWidth)
{
	pos.y = CubeWidth - pos.y;
	int BlockSize = CubeWidth / BlocksPerFaceAcross;
	int XIndex = (pos.x - (pos.x % BlockSize)) / BlockSize; 
	int YIndex = (pos.y - (pos.y % BlockSize)) / BlockSize; 
	int BlockIndex = (BlocksPerFaceAcross * XIndex) + YIndex + (pos.z * BlocksPerFaceAcross * BlocksPerFaceAcross);
	return CullFlags[BlockIndex].x;
}

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void DecomposeCS(uint3 ThreadID : SV_DispatchThreadID)
{
	uint InputW, InputH, InputD;
	RWInputCubeAsArray.GetDimensions(InputW, InputH, InputD);
	uint OutputW, OutputH;
	RWOutputColorTexture.GetDimensions(OutputW, OutputH);
	int3 pos = int3(ThreadID);

	if (ThreadID.x >= OutputW || ThreadID.y >= OutputH || !FragmentIsVisible(pos, InputW))
		return;

	int2 FaceOffsets[] = { {0,0},{1,0},{2,0},{0,1},{1,1},{2,1} };

	float4 SceneColor = RWInputCubeAsArray[pos];
	SceneColor.x = sqrt(SceneColor.x);
	SceneColor.y = sqrt(SceneColor.y);
	SceneColor.z = sqrt(SceneColor.z);
	RWOutputColorTexture[int2(ThreadID.x, ThreadID.y ) + Offset + InputW * FaceOffsets[pos.z]] = SceneColor;
}

float PosToDistanceMultiplier(int2 pos, int w)
{
	float h = (w +1.0) / 2.0;
	vec2 diff = (vec2(pos) - vec2(h, h)) *2.0/ vec2(w, w);
	return sqrt(1.0 + dot(diff, diff));
}

float GetDepth(int3 pos, int w)
{
	float m = PosToDistanceMultiplier(pos.xy,w);
	float d = RWInputCubeAsArray[pos].a;
	d *= m;
	return d;
}

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void DecomposeDepthCS(uint3 ThreadID : SV_DispatchThreadID)
{
	uint InputW, InputH, InputD;
	RWInputCubeAsArray.GetDimensions(InputW, InputH, InputD);
	uint OutputW, OutputH;
	RWOutputColorTexture.GetDimensions(OutputW, OutputH);

	int3 pos = int3(ThreadID);
	pos.xy *= 2;

	if (ThreadID.x >= OutputW || ThreadID.y >= OutputH || !FragmentIsVisible(pos, InputW))
		return;
	
	int2 FaceOffsets[] = { {0,0},{1,0},{2,0},{0,1},{1,1},{2,1} };

	float d00 = GetDepth(pos,InputW);
	float d01 = GetDepth(pos+int3(1,0,0), InputW);
	float d10 = GetDepth(pos+int3(0,1,0), InputW);
	float4 DepthValue =  float4(d00, d01, d10, 1.0) / 100.0 / 20.0;

	RWOutputColorTexture[int2(ThreadID.x, ThreadID.y) + Offset + InputW * FaceOffsets[pos.z]/2] = DepthValue;
}
